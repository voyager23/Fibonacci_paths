Here are some other results:

Limit      Result      Time
-----------------------------
 1000    790802713    0.3 sec
 5000    126968109    8.8 sec
10000    860873428   42.3 sec
20000    893422979  205.8 sec
30000    451632021  509.2 sec
40000    264938001  910.5 sec
50000    395017546 1477.0 sec
60000    156903036 2164.8 sec
63000    543864149 2440.1 sec

Execution time is just under 43 seconds.

			for(auto it_py = pyth_step.begin(); it_py != pyth_step.end(); ++it_py) {
				int w_step = w - (*it_py)[0];
				int h_step = h - (*it_py)[1];
				if((w_step >= 0)and(h_step >= 0)) {
					lattice[w][h].count += lattice[w_step][h_step].count;
					lattice[w][h].count %= modulus;
					// swap coords
					w_step = w - (*it_py)[1];
					h_step = h - (*it_py)[0];					
					if((w_step >= 0)and(h_step >=0)) {
						lattice[w][h].count += lattice[w_step][h_step].count;
						lattice[w][h].count %= modulus;
					}

				} else {
					// swap coords
					w_step = w - (*it_py)[1];
					h_step = h - (*it_py)[0];				
					if((w_step >= 0)and(h_step >=0)) {
						lattice[w][h].count += lattice[w_step][h_step].count;
						lattice[w][h].count %= modulus;
					} else {
						lattice[w][h].count %= modulus;
						lattice[h][w].count = lattice[w][h].count;
						break;
					}
				}
			} // pythag steps

			// ----------pythagoras triple steps----------
			for(auto it_py = pyth_step.begin(); it_py != pyth_step.end(); ++it_py) {
				int wx = w - (*it_py)[1];
				int hx = h - (*it_py)[0];	// above diagonal
				int wy = hx;
				int hy = wx;			// below diagonal;
				bool x_fail = false;
				bool y_fail = false;
				if((wx >= 0)and(hx >= 0)) {
					lattice[w][h].count = (lattice[w][h].count + lattice[wx][hx].count) % modulus;
				} else { 
					x_fail = true;
				}
				if((wy >= 0)and(hy >= 0)) {
					lattice[w][h].count = (lattice[w][h].count + lattice[wy][hy].count) % modulus;
				} else {
					y_fail = true;
				}
				if(x_fail and y_fail) break;
				lattice[h][w].count = lattice[w][h].count;
				
			} // -------------------------------------------			
